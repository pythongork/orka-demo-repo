
name: Orka Ephemeral Runner Magic Demo

on:
  workflow_dispatch:  # Allows manual trigger from GitHub UI for demo purposes

jobs:
  magic-job:
    runs-on: my-orka-runner  # Matches your RUNNERS config in .env - this triggers the ephemeral Orka VM
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify macOS Environment on Ephemeral VM
        run: |
          echo "=== Starting Magic Demo on Ephemeral Orka macOS VM ==="
          sw_vers  # Print macOS version to confirm we're on a macOS VM
          uname -a  # Print kernel info
          system_profiler SPHardwareDataType  # Print hardware overview (e.g., shows it's a VM)
          echo "Ephemeral VM is alive and ready for magic!"

      - name: Set Up Swift (Assumes Xcode/Swift is Pre-Installed on VM Config)
        run: |
          swift --version  # Verify Swift is available (if not, the VM config needs Xcode)
          echo "Swift is ready for computational magic!"

      - name: Create Swift Package for Pi Estimation
        run: |
          # Initialize a simple executable Swift package named 'pi-magic'
          swift package init --name pi-magic --type executable
          
          # Overwrite the main.swift with a Monte Carlo Pi approximation script
          cat << EOF > Sources/pi-magic/main.swift
          import Foundation

          // Function to estimate Pi using Monte Carlo simulation
          func estimatePi(numPoints: Int) -> Double {
              var insideCircle = 0
              for _ in 0..<numPoints {
                  let x = Double.random(in: 0...1)
                  let y = Double.random(in: 0...1)
                  if x * x + y * y <= 1 {
                      insideCircle += 1
                  }
              }
              return 4.0 * Double(insideCircle) / Double(numPoints)
          }

          // Run the simulation with a large number of points for accuracy
          let points = 5000000  // 5 million points - adjust for demo speed (higher = more accurate but slower)
          let piApprox = estimatePi(numPoints: points)
          print("=== Magical Pi Approximation on Ephemeral Orka VM ===")
          print("Using Monte Carlo method with \(points) random points:")
          print("Estimated Pi: \(piApprox)")
          print("Actual Pi (for comparison): 3.14159265359")
          print("Error: \(abs(piApprox - Double.pi))")
          print("Magic complete! This computation ran on a freshly created macOS VM that will self-destruct after the job.")
          EOF
          
          echo "Swift package created with Pi estimation magic!"

      - name: Build the Swift Package
        run: |
          swift build -c release  # Build in release mode for optimization
          echo "Swift package built successfully!"

      - name: Run the Pi Magic Program
        run: |
          .build/release/pi-magic  # Execute the compiled binary
          echo "=== Ephemeral VM Demo Complete ==="
          echo "The VM was created just for this job, performed the magic computation, and will now be automatically deleted."

      - name: Bonus - System Benchmark (To Showcase VM Performance)
        run: |
          # Run a simple CPU benchmark using sysbench (install via Homebrew if available)
          if ! command -v brew &> /dev/null; then
            echo "Homebrew not found - skipping benchmark (ensure your Orka VM config includes Homebrew for full demo)."
          else
            brew install sysbench || true  # Install if not present
            sysbench cpu --cpu-max-prime=20000 --threads=4 run  # Run a quick CPU benchmark
          fi
          echo "Benchmark complete - highlights the ephemeral VM's capabilities!"
